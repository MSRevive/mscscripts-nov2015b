//More dynamic, array based chat system JUL2010_11 by Thothie

//callevent chat_add_text <convo_sequence_name> <sentence_string> [time] [anim|"none"] [event]
//- <convo_sequence_name> conversation sequence to add text to
//- <sentence_string> text of sentence to say
//- [time] delay before speaking next line in conversation (defaults to CHAT_DELAY if ommited)
//- [anim|"none"] play anim at beginning of this sentence (overrides random convo anims [see: chat_convo_anim])
//- [event] fire this event on this step at end of step

//callevent chat_start_sequence <convo_sequence_name> ["abort"]
//- starts the stored chat sequence (will not fire if busy running a sequence, unless CHAT_BUSY_OVERRIDE is set - in which case it also clears the current chat array)
//- calls npc_chat_was_busy event (see "return events" below) when attempting/succeeding in calling a new conversation with one already in progress
//- [abort] flag causes any chat in progress to end and be replaced by the requested <sequence_name> even if CHAT_BUSY_OVERRIDE is set to 0

//callevent chat_face_speaker [target]
//- faces speaker
//- if param omitted, faces last ent_lastspoke or last player to use interaction menu (as determined by chat_find_speaker_id event below)

//callevent chat_move_mouth <time>
//- moves mouth for <time> seconds, as if speaking
//- default behavior is to do this every chat step, unless const CHAT_MOVE_MOUTH is set 0
//- (related events: chat_open_mouth, chat_close_mouth)

//callevent chat_convo_anim
//- plays a random animation from the CHAT_CONV_ANIMS token list
//- default behavior is to do this every chat step, unless const CHAT_USE_CONV_ANIMS is set 0
//- note the default CHAT_CONV_ANIMS are only good for NPCs with full scientist animations

//callevent chat_now <text> [time] [anim|"none"] ["abort"]
//- plays random convo animation (unless CHAT_USE_CONV_ANIMS is set 0 or [anim] param used), moves mouth (for [time] seconds, or default CHAT_DELAY if omitted) and says text 
//- ignored if in middle of conversation sequence and CHAT_BUSY_OVERRIDE is 0 unless the "abort" flag is added, in which case current chat sequence is stopped
//- good for one-liners or things that may interrupt conversation

//callevent chat_stop
//- aborts current chat sequence, if any
//- note that it is not necessary to do this to change conversations mid-chat
//- to do that, set const CHAT_BUSY_OVERRIDE 1, and simply call another chat_start_sequence or use that event's abort parameter

//callevent chat_find_speaker_id
//- finds the speaker's id (really guesses)
//- Guess work favors order: last_used_menu(if within 512 units)->last_spoke(if within 512)->any player within 512->first player indexed (regardless of distance)->well f*ck there's no players ;)

//return event:
//{ npc_chat_was_busy //<action_taken:aborted|ignored|started_new>
//- This event is called when a player attempts to interrupt an NPC mid speech, usually trying to change conversations mid sequence
//- The returning PARAM1 indicates the action taken:
//- PARAM1 = "aborted" - npc aborted speech (no new convo) [usually means chat_stop was called]
//- PARAM1 = "ignored" - npc ignored player's request (just kept on with current convo [default behavior])
//- PARAM1 = "started_new" - npc started new conversation (default if const CHAT_BUSY_OVERRIDE set to 1)
//(This event is not called if conversation is stopped by monster death)

//flags:
//CHAT_BUSY - busy chatting when set to 1 (ala ye old BUSY_CHATTING)


#scope server
{ [shared]
	const CHAT_CONV_ANIMS "converse2;converse1;talkleft;talkright;lean;pondering;pondering2;pondering3;"
}

{
	setvar HAS_BASE_CHAT_ARRAY_INCLUDE 1

	const CHAT_USE_CONV_ANIMS 1 //the above anims are for sci-anim NPC's, disable this or replace the above token string for other models
	const CHAT_MOVE_MOUTH 1 //disable this for NPC's without the mouth controller, or for monsters where the alt controller looks odd
	const CHAT_NO_CLOSE_MOUTH 0 //aborts closing of mouth at end of chat sequence if set to 1 - fixes controller issues on some models
	const CHAT_AUTO_FACE 1 //face last known speaker when conversation begins, or last person to activate NPC menu (if any)
	const CHAT_FACE_ON_USE 1 //face player when he tries to activate interaction menu (also designates him as last known speaker)
	const CHAT_MENU_ENABLE 1 //set to 0 to disable NPC menu on use
	const CHAT_BUSY_OVERRIDE 0 //if busy chatting, and chat_start_sequence called, load new sequence anyways


	setvard CHAT_MENU_ON 1 //set to 0 to temporarily disable chat adding menu items below (if any set)
	const CHAT_AUTO_HAIL 0 //adds say_hi catchspeech and menu item
	const CHAT_AUTO_JOB 0 //adds say_job catchspeech and menu item
	const CHAT_AUTO_RUMOR 0 //adds say_rumor catchspeech and menu item

	const CHAT_MAX_LINE_LEN 192 //max length of chat string

	const CHAT_DELAY 4.0 //default delay between chat steps

	setvard CHAT_CURRENT_SPEAKER none //speaker will be stored here
}

{ game_spawn
	menu.autoopen CHAT_MENU_ENABLE

	if ( CHAT_AUTO_HAIL ) catchspeech say_hi hail hi j0 yo waddup wassup gweets greet
	if ( CHAT_AUTO_JOB ) catchspeech say_job job work
	if ( CHAT_AUTO_RUMOR ) catchspeech say_rumor rumour rumor
}

{ game_menu_getoptions

	//these vars are used to help chat_face_speaker determine target
	setvard CHAT_CURRENT_SPEAKER PARAM1
	setvard CHAT_LAST_USED_MENU PARAM1

	if ( CHAT_FACE_ON_USE ) setmovedest PARAM1 9999

	if CHAT_MENU_ON

	//these are provided to help encourage standardization among multiple NPCs

	if ( CHAT_AUTO_HAIL )
	{
		local reg.mitem.title 	"Hail"
		local reg.mitem.type 	callback
		local reg.mitem.callback say_hi
		menuitem.register
	}

	if ( CHAT_AUTO_JOB )
	{
		local reg.mitem.title 	"Ask about Jobs"
		local reg.mitem.type 	callback
		local reg.mitem.callback say_job
		menuitem.register
	}

	if ( CHAT_AUTO_RUMOR )
	{
		local reg.mitem.title 	"Ask about Rumors"
		local reg.mitem.type 	callback
		local reg.mitem.callback say_rumor
		menuitem.register
	}
}

{ chat_add_text //<sequence_name> <text_line> [time] [anim] [event]

	//dbg chat_add_text PARAM1 [ $left(PARAM2,10) ] PARAM3 PARAM4 PARAM5
	
	local CONVO_NAME PARAM1

	local CONVO_DELAYS CONVO_NAME
	stradd CONVO_DELAYS "_DELAYS"

	local CONVO_ANIMS CONVO_NAME
	stradd CONVO_ANIMS "_ANIMS"

	local CONVO_EVENTS CONVO_NAME
	stradd CONVO_EVENTS "_EVENTS"

	local CONV_ARRAY_EXISTS $get_array(PARAM1,0)

	if ( CONV_ARRAY_EXISTS contains '[ERROR_NO_ARRAY]' )
	{
		dbg chat_add_text creating new array for CONVO_NAME
		array.create CONVO_NAME
		array.create CONVO_DELAYS
		array.create CONVO_ANIMS
		array.create CONVO_EVENTS
	}

	local L_CHAT_TEXT PARAM2

	local L_CHAT_DELAY PARAM3
	if ( L_CHAT_DELAY startswith 'PARAM' ) local L_CHAT_DELAY CHAT_DELAY

	local L_CHAT_ANIM PARAM4
	if ( L_CHAT_ANIM startswith 'PARAM' ) local L_CHAT_ANIM 'none'

	local L_CHAT_EVENT PARAM5
	if ( L_CHAT_EVENT startswith 'PARAM' ) local L_CHAT_EVENT 'none'

	array.add CONVO_NAME L_CHAT_TEXT
	array.add CONVO_DELAYS L_CHAT_DELAY
	array.add CONVO_ANIMS L_CHAT_ANIM
	array.add CONVO_EVENTS L_CHAT_EVENT

	//debugarry
	local ARRAY_IDX $get_array_amt(CONVO_NAME)
	subtract ARRAY_IDX 1
	local DBG_TXT $get_array(CONVO_NAME,ARRAY_IDX)
	dbg chat_add_text final PARAM1 step ARRAY_IDX txt[ $left(DBG_TXT,11) ] del $get_array(CONVO_DELAYS,ARRAY_IDX) anim $get_array(CONVO_ANIMS,ARRAY_IDX) event $get_array(CONVO_EVENTS,ARRAY_IDX)
}

{ chat_start_sequence //<sequence_name> ["abort"]

	dbg chat_start_sequence PARAM1 PARAM2

	if ( CHAT_AUTO_FACE ) callevent chat_face_speaker

	setvard CHAT_ABORT 0 //just in case
	local CONVO_NAME PARAM1
	local CONV_ARRAY_EXISTS $get_array(PARAM1,0)
	if ( CONV_ARRAY_EXISTS contains '[ERROR_NO_ARRAY]' )
	{
		saytext [ERROR] conversation CONVO_NAME does not exist!
		local EXIT_SUB 1
	}
	if !EXIT_SUB

	if ( CHAT_BUSY )
	{
		if ( PARAM2 equals abort )
		{
			dbg chat_start_sequence: Flag aborting ( CHAT_SEQUENCE ) for new sequence ( PARAM1 )
			callevent npc_chat_was_busy started_new
		}
		if PARAM2 isnot abort
		if ( !CHAT_BUSY_OVERRIDE )
		{
			dbg chat_start_sequence: Attempted to start new chat ( PARAM1 ) while already in conversation ( CHAT_SEQUENCE )
			callevent npc_chat_was_busy ignored
			local EXIT_SUB 1
		}
		else
		{
			callevent npc_chat_was_busy started_new
			dbg chat_start_sequence: Aborting ( CHAT_SEQUENCE ) for new sequence ( PARAM1 )
		}
	}
	if !EXIT_SUB

	//reset chat sequence
//	array.erase ARRAY_CHAT_LINES
//	array.erase ARRAY_CHAT_DELAYS
//	array.erase ARRAY_CHAT_ANIMS
//	array.erase ARRAY_CHAT_EVENTS	
//
//	//load new chat sequence
//	array.create ARRAY_CHAT_LINES
//	array.create ARRAY_CHAT_DELAYS
//	array.create ARRAY_CHAT_ANIMS
//	array.create ARRAY_CHAT_EVENTS

	setvard CHAT_SEQUENCE CONVO_NAME
	setvard CHAT_LINES_ANAME CONVO_NAME
	setvard CHAT_DELAYS_ANAME CONVO_NAME
	stradd CHAT_DELAYS_ANAME "_DELAYS"
	setvard CHAT_ANIMS_ANAME CONVO_NAME
	stradd CHAT_ANIMS_ANAME "_ANIMS"
	setvard CHAT_EVENTS_ANAME CONVO_NAME
	stradd CHAT_EVENTS_ANAME "_EVENTS"

	//calleventloop $get_array_amt(CHAT_SEQUENCE) chat_load_sequence

	setvard CHAT_STEP 0

	setvard CHAT_BUSY 1

	callevent chat_array_loop
}

//{ chat_load_sequence
//	local CUR_IDX game.script.iteration
//	array.add ARRAY_CHAT_LINES $get_array(CHAT_LINES_ANAME,CUR_IDX)
//	array.add ARRAY_CHAT_DELAYS $get_array(CHAT_DELAYS_ANAME,CUR_IDX)
//	array.add ARRAY_CHAT_ANIMS $get_array(CHAT_ANIMS_ANAME,CUR_IDX)
//	array.add ARRAY_CHAT_EVENTS $get_array(CHAT_EVENTS_ANAME,CUR_IDX)
//
//	//debugarry
//	local L_TXT $get_array(CHAT_LINES_ANAME,CUR_IDX)
//	dbg Reading In: ARRAY_CHAT_LINES # CUR_IDX - txt[ $left(L_TXT,11) ] del $get_array(CHAT_DELAYS_ANAME,CUR_IDX) anim $get_array(CHAT_ANIMS_ANAME,CUR_IDX) evt $get_array(CHAT_EVENTS_ANAME,CUR_IDX)
//}

{ chat_array_loop

	if ( CHAT_ABORT )
	{
		setvard CHAT_ABORT 0
		setvard CHAT_BUSY 0
		local EXIT_SUB 1
	}
	if !EXIT_SUB

	local CUR_LINE $get_array(CHAT_LINES_ANAME,CHAT_STEP)
	local CUR_LEN $len(CUR_LINE)
	add CUR_LEN $len(game.monster.name)
	add CUR_LEN 6 //" says,"

	if ( CUR_LEN < CHAT_MAX_LINE_LEN )
	{
		saytext CUR_LINE
	}
	else
	{
		saytext [ERROR: LINE TOO LONG!] [ CHAT_LINES_ANAME $int(CHAT_STEP) - $int(CUR_LEN) / $int(CHAT_MAX_LINE_LEN) ]
	}

	local CUR_DELAY $get_array(CHAT_DELAYS_ANAME,CHAT_STEP)

	local CUR_ANIM $get_array(CHAT_ANIMS_ANAME,CHAT_STEP)
	if ( CUR_ANIM isnot none )
	{
		playanim critical CUR_ANIM
	}
	else
	{
		if CHAT_USE_CONV_ANIMS
		callevent chat_convo_anim
	}

	local CUR_EVENT $get_array(CHAT_EVENTS_ANAME,CHAT_STEP)
	if ( CUR_EVENT isnot none )
	{
		dbg calling chat_event CUR_EVENT [ from sequence: CHAT_EVENTS_ANAME step CHAT_STEP ]
		callevent CUR_DELAY CUR_EVENT
	}


	if ( CHAT_MOVE_MOUTH ) callevent chat_move_mouth CUR_DELAY

	local L_N_STEPS $get_array_amt(CHAT_SEQUENCE)
	subtract L_N_STEPS 1

	dbg chat_array_loop: step CHAT_STEP of L_N_STEPS ( rate CUR_DELAY ) [ abort = CHAT_ABORT ]

	if ( CHAT_STEP == L_N_STEPS ) setvard CHAT_BUSY 0
	if CHAT_STEP < L_N_STEPS
	add CHAT_STEP 1
	callevent CUR_DELAY chat_array_loop
}

{ chat_convo_anim
	local N_ANIMS $get_token_amt(CHAT_CONV_ANIMS)
	subtract N_ANIMS 1
	local RND_ANIM $rand(0,N_ANIMS)
	playanim critical $get_token(CHAT_CONV_ANIMS,RND_ANIM)
}

{ chat_move_mouth //<time>
	if ( PARAM1 startswith 'PARAM' )
	{
		//do nadda		
	}
	else
	{
		setvard CHAT_END_MOVE_MOUTH game.time
		add CHAT_END_MOVE_MOUTH PARAM1
		subtract CHAT_END_MOVE_MOUTH 1.0 //give sec for sentence to end
		dbg bchat_auto_mouth_move ( PARAM1 )
	}

	if ( game.time < CHAT_END_MOVE_MOUTH )
	{
		local RND_SAY "["
		local M_TIME $randf(0.1,0.3)
		stradd RND_SAY M_TIME
		stradd RND_SAY "]"
		say RND_SAY

		add M_TIME 0.1
		callevent M_TIME chat_close_mouth
		add M_TIME 0.1
		callevent M_TIME chat_move_mouth
	}
}

{ chat_close_mouth
	if !CHAT_NO_CLOSE_MOUTH //some monsters express chat by shaking their spine controller - setting them to 0 may look odd, so use this in those cases
	setprop ent_me controller1 0
}

{ chat_open_mouth //not used here in, but maybe useful externally
	setprop ent_me controller1 -1
}

{ chat_face_speaker
	if !CHAT_TEMP_NO_AUTO_FACE
	if ( PARAM1 isnot 'PARAM1' )
	{
		setvard CHAT_CURRENT_SPEAKER PARAM1
	}
	else
	{
		callevent chat_find_speaker_id
	}
	setmovedest CHAT_CURRENT_SPEAKER 9999
}

{ chat_find_speaker_id
	local L_LAST_SPOKE $get(ent_lastspoke,id)
	if ( $get(L_LAST_SPOKE,isalive) )
	{
		if $get(L_LAST_SPOKE,range) < 512
		setvard CHAT_CURRENT_SPEAKER L_LAST_SPOKE
	}
	if ( $get(CHAT_LAST_USED_MENU,isalive) )
	{
		if $get(CHAT_LAST_USED_MENU,range) < 512
		setvard CHAT_CURRENT_SPEAKER CHAT_LAST_USED_MENU
	}
	if ( !$get(CHAT_CURRENT_SPEAKER,isalive) )
	{
		dbg failed to find speaker, wild guess
		setvard CHAT_CURRENT_SPEAKER $get_insphere(player,512)
	}
	if ( !$get(CHAT_CURRENT_SPEAKER,isalive) )
	{
		//final fail safe - unlesss there are no players on the server ^_^
		getplayersnb PLAYER_LIST
		setvard CHAT_CURRENT_SPEAKER $get_token(PLAYER_LIST,0)
	}
}

{ chat_now //<text> [time] [anim|"none"] ["abort"]
	if ( CHAT_BUSY )
	{
		if ( !CHAT_BUSY_OVERRIDE )
		{
			if PARAM4 isnot 'abort'
			dbg chat_now: Can't chat, already in conversation CHAT_SEQUENCE
			local EXIT_SUB 1
		}
		else
		{
			local L_ABORT_SEQUENCE 1
		}

		if ( PARAM4 equals 'abort' ) local L_ABORT_SEQUENCE 1
		if L_ABORT_SEQUENCE
		dbg chat_now: Aborting chat sequence CHAT_SEQUENCE
		callevent chat_stop
	}
	if !EXIT_SUB

	saytext PARAM1

	local L_MOUTH_MOVE_TIME PARAM2
	if ( PARAM2 startswith 'PARAM' ) local L_MOUTH_MOVE_TIME CHAT_DELAY
	if ( CHAT_MOVE_MOUTH ) callevent chat_move_mouth L_MOUTH_MOVE_TIME

	if ( PARAM3 startswith 'PARAM' )
	{
		local L_ANIM_NAME none
	}
	else
	{
		local L_ANIM_NAME PARAM3
	}
	
	if ( L_ANIM_NAME isnot none )
	{
		playanim critical L_ANIM_NAME
	}
	else
	{
		if CHAT_USE_CONV_ANIMS
		callevent chat_convo_anim
	}
}

{ chat_stop
	if CHAT_BUSY
	if ( $get(ent_me,isalive) ) callevent npc_chat_was_busy aborted
	setvard CHAT_ABORT 1
}

{ game_death
	if CHAT_BUSY
	callevent chat_stop
}

//debuggary
{ ext_dump_chat //<chat sequence>
	setvard DUMP_CONVO PARAM1
	calleventloop $get_array_amt(DUMP_CONVO) dump_chat
}

{ dump_chat
	local CUR_IDX game.script.iteration
	local CUR_LINES_ANAME DUMP_CONVO
	local CUR_DELAYS DUMP_CONVO
	stradd CUR_DELAYS _DELAYS
	local CUR_ANIMS DUMP_CONVO
	stradd CUR_ANIMS '_ANIMS'
	local CUR_EVENTS DUMP_CONVO
	stradd CUR_EVENTS '_EVENTS'

	local CUR_TEXT $get_array(CUR_LINES_ANAME,CUR_IDX)
	local CUR_DELAY $get_array(CUR_DELAYS,CUR_IDX)
	local CUR_ANIM $get_array(CUR_ANIMS,CUR_IDX)
	local CUR_EVENT $get_array(CUR_EVENTS,CUR_IDX)

	dbg dump DUMP_CONVO # CUR_IDX txt[ $left(CUR_TEXT,11) ] del CUR_DELAY anim CUR_ANIM evt CUR_EVENT
}