#scope server

{ //Is called Before the entity is spawned
	const ANIM_IDLE idle
	const ANIM_CLOSE close
	const ANIM_OPEN open

	//Can't take expendables, decayables, or stacked items as it would reset quality
	const BANK_DEPOSIT_REJECTED "mana_bravery;fist_bare;mana_mpotion;health_apple;health_mpotion;health_lpotion;health_spotion;pack_;sheath_;magic_hand_;item_tk_" //proj_;
	const PARSER_AMMO ":"
	const PARSER_TOKEN ";"
	const AMMO_MAX_WITHDRAW 100
	const BANK_TITLE "Galat's Wondrous Chest of Storage"
	
	const BANK_STRINGS "b1;b2;b3;b4;b5;b6;b7;b8;b9" //The "storage units."
	const BANK_MAX_STRING 225 //The max string length is 255, however, I assume this is lower to prevent overflows. That or the longest script name in the game is 25 characters long
	
	setvard GALAT_CHEST 1 //idunno it wuz just in the original script \/('-')\/
	setvard NPC_ECHO_ITEMS 1 //I *THINK* this is what runs ext_player_got_item when a player takes an item from a store
	setvard NPC_NO_REPORT_ITEMS 1 //Doesn't give that little notebox in the top left when items are taken from a store/chest
}

{ game_spawn //Is called after the entity is spawned
	name BANK_TITLE
	hp 1
	invincible 2
	width 20
	height 30
	setmodel misc/treasure.mdl
	setmodelbody 0 2
	gravity 0.1
	nopush 1
	
	setidleanim ANIM_IDLE
	setmonsterclip 1
	menu.autoopen 1
}

{ game_menu_getoptions //PARAM1 = Player who clicked e on galats
	setvard NEW_CHEST_USER PARAM1
	setvard N_DEPOSIT_OPTIONS 0
	setvard BANK_WITHDRAW_CHECK 0
	setvard BANK_CURRENT full
	if ( CURRENTLY_DEPOSITING != 1 ) //First check for deposit items
	{
		calleventloop $get_token_amt(BANK_STRINGS) bank_get_free NEW_CHEST_USER //Will check the NEW_CHEST_USER's bank to see if there's available space from b1 to b9
		if ( BANK_CURRENT isnot full )
		{
			callevent user_get_hands NEW_CHEST_USER //Gets the item ids of the left and right hand of NEW_CHEST_USER, and assigns how many options are available to the variable N_DEPOSIT_OPTIONS
			if ( N_DEPOSIT_OPTIONS == 0 ) //If no depositing options are available (nothing in hands) display a message
			{
				infomsg NEW_CHEST_USER "BANK_TITLE" "Be sure to place any items you wish to store in your hands."
			}
			else
			{
				setvard BANK_REJECT_ITEM 0
				calleventloop $get_token_amt(BANK_DEPOSIT_REJECTED) bank_get_reject $get(USER_LHAND_ID,itemname) $get(USER_LHAND_ID,name) //Checks if the items in your hands should be rejected. If it is, the hand will be set to 0.
				if ( BANK_REJECT_ITEM != 1 )
				{
					callevent bank_deposit_option_add USER_LHAND_ID BANK_CURRENT
				}
			
				setvard BANK_REJECT_ITEM 0
				calleventloop $get_token_amt(BANK_DEPOSIT_REJECTED) bank_get_reject $get(USER_RHAND_ID,itemname) $get(USER_RHAND_ID,name)
				if ( BANK_REJECT_ITEM != 1 )
				{
					callevent bank_deposit_option_add USER_RHAND_ID BANK_CURRENT
				}
			}
		}
		if ( BANK_CURRENT equals full )
		{
			local reg.mitem.title "Your chest is full"
			local reg.mitem.type disabled
			menuitem.register
		}
	}
	else
	{
		local reg.mitem.title "Depositing in use"
		local reg.mitem.type disabled
		menuitem.register
	}
	
	if ( CURRENTLY_WITHDRAWING != 1 )
	{
		if ( BANK_WITHDRAW_CHECK == 0 ) //First check to see if we already did a withdraw check
		{
			if ( CURRENTLY_DEPOSITING == 1 ) //If it doesn't look like it, and if someone is depositing, we for sure didn't do it
			{
				calleventloop $get_token_amt(BANK_STRINGS) bank_get_free NEW_CHEST_USER //So check banks
			}
		}
		
		if ( BANK_WITHDRAW_CHECK != 1 ) //Checks to see if there's anything in galats. Returns 1 if there's nothing
		{
			if ( $get(NEW_CHEST_USER,numitems) >= G_MAX_ITEMS ) //If there is, check if the user has enough space to withdraw
			{
				infomsg NEW_CHEST_USER "BANK_TITLE" "Can't withdraw items; your inventory is full."
				local reg.mitem.title "Inventory Full"
				local reg.mitem.type disabled
				menuitem.register
				local EXIT_SUB 1
			}
			
			if ( !EXIT_SUB )
			{
				local reg.mitem.title "Withdraw Item"
				local reg.mitem.type callback
				local reg.mitem.callback bank_withdraw
				menuitem.register
			}
		}
	}
	else
	{
		local reg.mitem.title "Withdrawing in use"
		local reg.mitem.type disabled
		menuitem.register
	}
}

{ bank_deposit_option_add //PARAM1 = ITEMID PARAM2 = BANK_CURRENT
	local L_ITEM_ID PARAM1
	local L_ITEM_SCRIPTNAME $get(L_ITEM_ID,itemname)
	local L_BANK_UNIT PARAM2
	local L_MENU_REJECT 0
	local L_ITEM_QUANTITY $get(L_ITEM_ID,quantity) //We're only going to store and withdraw 100s at a time
	local L_TEMP_PROJ "proj_"
	
	local L_TOKEN_PASS L_ITEM_ID
	token.add L_TOKEN_PASS L_BANK_UNIT
	
	if ( $get(L_ITEM_ID,name) equals 0 ) local L_MENU_REJECT 1	//For certain dual weilding weapons, after depositing one, sometimes you can try to deposit '0', resulting in locking galats
	if ( $get(L_ITEM_ID,scriptvar,'NO_BANK') ) local L_MENU_REJECT 1	//This is from the original script. I've got no idea if items use this flag

	if ( L_MENU_REJECT != 1 )
	{
		local L_MENU_TITLE "Deposit "
		stradd L_MENU_TITLE $get(L_ITEM_ID,name)
		
		if ( L_ITEM_SCRIPTNAME startswith L_TEMP_PROJ )
		{
			if ( L_ITEM_QUANTITY != 0 )
			{
				token.add L_TOKEN_PASS L_ITEM_QUANTITY
				if ( L_ITEM_QUANTITY > AMMO_MAX_WITHDRAW )
				{
					stradd L_MENU_TITLE " ("
					stradd L_MENU_TITLE AMMO_MAX_WITHDRAW
					stradd L_MENU_TITLE ")"
				}
				else
				{
					stradd L_MENU_TITLE " ("
					stradd L_MENU_TITLE L_ITEM_QUANTITY
					stradd L_MENU_TITLE ")"
				}
			}
		}
		
		local reg.mitem.title L_MENU_TITLE
		local reg.mitem.type callback
		local reg.mitem.data L_TOKEN_PASS
		local reg.mitem.callback bank_deposit
		menuitem.register
	}
}

{ bank_withdraw //PARAM1 = PlayerID
	local L_PLAYER_ID PARAM1
	if ( CURRENTLY_WITHDRAWING != 1 )
	{
		setvard CURRENTLY_WITHDRAWING 1
		
		setvard BANK_STORE galat_
		stradd BANK_STORE $get(L_PLAYER_ID,steamid)
		
		npcstore.create BANK_STORE
		
		calleventloop $get_token_amt(BANK_STRINGS) bank_store_build L_PLAYER_ID
		npcstore.offer BANK_STORE L_PLAYER_ID inv bank_withdraw
		callevent bank_open
	}
	else
	{
		dplayermessage L_PLAYER_ID "Someone else is currently withdrawing. Try again in a moment."
	}
}

{ bank_withdraw_done
	npcstore.remove BANK_STORE
	setvard BANK_STORE galat_
	setvard CURRENTLY_WITHDRAWING 0
	callevent bank_close
}

{ ext_player_got_item //PARAM1 = ItemID PARAM2 = PlayerID  This is called when someone takes an item out of storage. No need to pass variables
	local L_ITEM_ID PARAM1
	local L_ITEM_SCRIPTNAME $get(L_ITEM_ID,itemname)
	local L_PLAYER_ID PARAM2
	local L_PLAYER_STEAMID $get(L_PLAYER_ID,steamid)
	local L_NOTFOUND
	
	callevent bank_search L_ITEM_SCRIPTNAME L_PLAYER_ID
	
	if ( BANK_SEARCH_FOUND equals L_NOTFOUND )
	{
		dbg Couldn't find L_ITEM_SCRIPTNAME in the bank of L_PLAYER_STEAMID !
		callexternal L_ITEM_ID game_putinpack
		callclitemevent L_ITEM_ID game_putinpack
		deleteent L_ITEM_ID
	}
	else
	{
		local L_BANK_UNIT $get_token(BANK_SEARCH_FOUND,0)
		local L_BANK_ITEMS $get_quest_data(L_PLAYER_ID,L_BANK_UNIT)
		local L_ITEM_IDX $get_token(BANK_SEARCH_FOUND,1)
		
		local L_DISASSEMBLE_TOKEN $func(func_bank_disassemble_ammo,L_PLAYER_ID,L_BANK_UNIT,L_ITEM_IDX) //The disasseble token returns [0]L_ITEM_SCRIPTNAME [1]L_ITEM_QUANTITY
		local L_ITEM_QUANTITY $get_token(L_DISASSEMBLE_TOKEN,1)
		
		if ( L_ITEM_QUANTITY > AMMO_MAX_WITHDRAW )
		{
			subtract L_ITEM_QUANTITY AMMO_MAX_WITHDRAW
			local L_ITEM_QUANTITY $int(L_ITEM_QUANTITY)
			
			local L_ITEM_SCRIPTNAME $func(func_bank_assemble_ammo,L_ITEM_SCRIPTNAME,-1,L_ITEM_QUANTITY)
			
			token.set L_BANK_ITEMS L_ITEM_IDX L_ITEM_SCRIPTNAME
			quest set L_PLAYER_ID L_BANK_UNIT L_BANK_ITEMS
		}
		else
		{
			token.del L_BANK_ITEMS L_ITEM_IDX
			quest set L_PLAYER_ID L_BANK_UNIT L_BANK_ITEMS
		}
	}
}

{ func_bank_disassemble_ammo //PARAM1 = L_PLAYER_ID PARAM2 = L_BANK_UNIT PARAM3 = L_ITEM_IDX
	local L_PLAYER_ID PARAM1
	local L_BANK_UNIT PARAM2
	local L_ITEM_IDX PARAM3
	local L_BANK_ITEMS $get_quest_data(L_PLAYER_ID,L_BANK_UNIT)
	
	local L_ITEM_SCRIPTNAME $get_token(L_BANK_ITEMS,L_ITEM_IDX)
	
	local L_ITEM_QUANTITY $string_from(L_ITEM_SCRIPTNAME,PARSER_AMMO)
	local L_ITEM_SCRIPTNAME $string_upto(L_ITEM_SCRIPTNAME,PARSER_AMMO)
	
	return L_ITEM_SCRIPTNAME
	return L_ITEM_QUANTITY
}

{ bank_search //PARAM1 = ScriptName PARAM2 = PlayerID	This function will search the player's bank strings for a particular item. It will then return the bank unit then item idx This also supports quantity based items
	setvard BANK_SEARCH_FOUND "none"
	local L_ITEM_SCRIPTNAME PARAM1
	local L_PLAYER_ID PARAM2
	
	setvard PARSE_AMMO_POS 0
	setvard PARSE_AMMO_TOKEN 0
	calleventloop $get_token_amt(BANK_STRINGS) bank_get_unit_idx L_ITEM_SCRIPTNAME L_PLAYER_ID //Sets BANK_SEARCH_FOUND to a token of BANK_UNIT;IDX
}

{ bank_get_unit_idx //PARAM1 = L_ITEM_SCRIPTNAME PARAM2 = L_PLAYER_ID //We're gonna set BANK_SEARCH_FOUND to a token of BANK_UNIT;IDX
	local L_NOTFOUND "none"
	if ( BANK_SEARCH_FOUND equals L_NOTFOUND ) //I really don't understand why if's dont like to take strings directly...
	{
		local L_ITEM_SCRIPTNAME PARAM1
		local L_PLAYER_ID PARAM2
		local L_BANK_UNIT $get_token(BANK_STRINGS,game.script.iteration)
		local L_BANK_ITEMS $get_quest_data(L_PLAYER_ID,L_BANK_UNIT)
		local L_TEMP_PROJ "proj_"
		
		if ( L_ITEM_SCRIPTNAME startswith L_TEMP_PROJ )
		{
			local L_ITEM_SCRIPTNAME $func(func_bank_assemble_ammo,L_ITEM_SCRIPTNAME,L_BANK_ITEMS)
		}
		
		local L_ITEM_IDX $get_find_token(L_BANK_ITEMS,L_ITEM_SCRIPTNAME)
		if ( L_ITEM_IDX != -1 ) //So if it's not -1, then we must've found something
		{
			if ( L_ITEM_SCRIPTNAME isnot '0' ) //If nothing was found in assemble ammo, it'd return 0. Banks with nothing in it have a 0 in their quest string
			{
				setvard BANK_SEARCH_FOUND L_BANK_UNIT
				token.add BANK_SEARCH_FOUND L_ITEM_IDX
			}
		}
	}
}

{ func_bank_assemble_ammo //PARAM1 = L_ITEM_SCRIPTNAME PARAM2 = L_BANK_ITEMS(Use -1 if you're not gonna use this) PARAM3 = Quantity of items(Optional, if withdrawing, this will handle it)
	local L_ITEM_SCRIPTNAME PARAM1
	local L_BANK_ITEMS PARAM2
	local L_ITEM_QUANTITY PARAM3
	
	if ( L_BANK_ITEMS != -1 )
	{
		local L_ITEM_QUANTITY 0 //Just in case, this probably isn't necessary... At all...
		setvard PARSE_AMMO_POS 0
		setvard PARSE_AMMO_TOKEN 0
		calleventloop $get_token_amt(L_BANK_ITEMS) bank_get_ammoparse_pos L_BANK_ITEMS L_ITEM_SCRIPTNAME
		
		if ( PARSE_AMMO_POS != 0 )
		{
			local L_CHAR_POS PARSE_AMMO_POS
			add L_CHAR_POS 1 //We dont want the ammo parser showing up in this
			local L_CHAR_POS $int(L_CHAR_POS)
			
			local L_ITEM_QUANTITY $string_upto(L_BANK_ITEMS,PARSER_TOKEN,L_CHAR_POS)
			stradd L_ITEM_SCRIPTNAME PARSER_AMMO
			stradd L_ITEM_SCRIPTNAME L_ITEM_QUANTITY
			return L_ITEM_SCRIPTNAME
		}
		
	}
	else
	{
		stradd L_ITEM_SCRIPTNAME PARSER_AMMO
		stradd L_ITEM_SCRIPTNAME L_ITEM_QUANTITY
		return L_ITEM_SCRIPTNAME
	}
}

{ bank_get_ammoparse_pos //PARAM1 = L_BANK_ITEMS PARAM2 = L_ITEM_SCRIPTNAME  Be sure to set PARSE_AMMO_POS and PARSE_AMMO_TOKEN to zero before calling this
	local L_BANK_ITEMS PARAM1
	local L_ITEM_SCRIPTNAME PARAM2
	local L_PARSE_START $get_token(PARSE_AMMO_TOKEN,$get_token_amt(PARSE_AMMO_TOKEN))
	local L_PARSE_AMMO_POS $search_string(L_BANK_ITEMS,PARSER_AMMO,L_PARSE_START) //Look for the ammo parser
	if ( L_PARSE_AMMO_POS != -1 )
	{
		local L_LENGTH_SCRIPTNAME $len(L_ITEM_SCRIPTNAME)
		
		//add L_PARSE_START 1
		//local L_PARSE_START $int(L_PARSE_START) //Gotta take away dat .00
		token.add PARSE_AMMO_TOKEN L_PARSE_START
		
		subtract L_PARSE_AMMO_POS L_LENGTH_SCRIPTNAME
		//subtract L_PARSE_AMMO_POS 1
		local L_PARSE_AMMO_POS $int(L_PARSE_AMMO_POS)
		
		local L_BANK_SEARCH $string_upto(L_BANK_ITEMS,PARSER_AMMO,L_PARSE_AMMO_POS)
		if ( L_BANK_SEARCH equals L_ITEM_SCRIPTNAME )
		{
			add L_PARSE_AMMO_POS L_LENGTH_SCRIPTNAME
			local L_PARSE_AMMO_POS $int(L_PARSE_AMMO_POS)
			setvard PARSE_AMMO_POS L_PARSE_AMMO_POS
		}
	}
}

{ bank_store_build //PARAM1 = PlayerID
	local L_PLAYER_ID PARAM1
	local L_BANK_UNIT $get_token(BANK_STRINGS,game.script.iteration)
	local L_BANK_ITEMS $get_quest_data(L_PLAYER_ID,L_BANK_UNIT)
	if ( $len(L_BANK_ITEMS) > 1 )
	{
		calleventloop $get_token_amt(L_BANK_ITEMS) bank_store_add L_BANK_ITEMS
	}
}

{ bank_store_add //PARAM1 = L_CUR_BANK_ITEMS from bank_store_build
	local L_ITEM_QUANTITY 1 
	local L_ITEM_BUNDLE 1
	local L_QUEST_ITEM $get_token(PARAM1,game.script.iteration)
	if ( L_QUEST_ITEM contains PARSER_AMMO )
	{
		local L_STORE_ITEM_ADD $string_upto(L_QUEST_ITEM,PARSER_AMMO)
		local L_ITEM_QUANTITY $string_from(L_QUEST_ITEM,PARSER_AMMO)
		local L_ITEM_BUNDLE L_ITEM_QUANTITY
		if ( L_ITEM_QUANTITY > AMMO_MAX_WITHDRAW ) local L_ITEM_BUNDLE AMMO_MAX_WITHDRAW
	}
	else
	{
		local L_STORE_ITEM_ADD L_QUEST_ITEM
	}
	npcstore.additem BANK_STORE L_STORE_ITEM_ADD L_ITEM_QUANTITY 0 0 L_ITEM_BUNDLE
}

{ bank_deposit //PARAM1 = Owner of the menu PARAM2 = (token[0] = item id token[1] = BANK_TOKEN token[2] = Quantity)
	local L_PLAYER_ID PARAM1

	if ( CURRENTLY_DEPOSITING != 1 )
	{
		setvard CURRENTLY_DEPOSITING 1
		
		local L_ITEM_ID $get_token(PARAM2,0)
		local L_BANK_UNIT $get_token(PARAM2,1)
		local L_BANK_ITEMS $get_quest_data(L_PLAYER_ID,L_BANK_UNIT)
		local L_ITEM_QUANTITY $get_token(PARAM2,2) //If no param was passed here, this will be equal to 0
		
		if ( L_BANK_UNIT equals full )
		{
			dplayermessage L_PLAYER_ID "Your chest is full!"
		}
		else
		{
			
			if ( $get(L_ITEM_ID,exists) )
			{
				local L_ITEM_SCRIPTNAME $get(L_ITEM_ID,itemname)
				local L_ITEM_FULLNAME $get(L_ITEM_ID,name)
				local L_TEMP_PROJ "proj_"
				
				if ( L_ITEM_SCRIPTNAME startswith L_TEMP_PROJ )
				{
					if ( L_ITEM_QUANTITY > AMMO_MAX_WITHDRAW )
					{
						local L_ITEM_QUANTITY_DIFF L_ITEM_QUANTITY
						subtract L_ITEM_QUANTITY_DIFF AMMO_MAX_WITHDRAW //We're gonna take the difference so we know what to set the hand ammo to
						local L_ITEM_QUANTITY_DIFF $int(L_ITEM_QUANTITY_DIFF) //Go away .00
						local L_ITEM_QUANTITY AMMO_MAX_WITHDRAW
						
						setquantity L_ITEM_ID L_ITEM_QUANTITY_DIFF //Set the remaining to the hands
					}
					else
					{
						if ( L_ITEM_QUANTITY <= 0 )
						{
							local EXIT_SUB 1
							dplayermessage L_PLAYER_ID "You cannot deposit zero or less than zero quantity! (How did you do that anyways?)"
						}
						if ( !EXIT_SUB )
						{
							callexternal L_ITEM_ID item_banked //Gotta call these so it looks nice on the client
							callclitemevent L_ITEM_ID game_putinpack
							deleteent L_ITEM_ID //Delete the ent
						}
					}
					if ( !EXIT_SUB ) //We're gonna do the special ammo storage functions here if a projectile already exists in galats
					{
						callevent bank_search L_ITEM_SCRIPTNAME L_PLAYER_ID //This will setvard a token that we can use, being BANK_SEARCH_FOUND [0]Bank unit, [1]ItemIDX
						local L_NOTFOUND "none"
						if ( BANK_SEARCH_FOUND isnot L_NOTFOUND )
						{
							local L_BANK_UNIT $get_token(BANK_SEARCH_FOUND,0) //IDX 0 on BANK_SEARCH_FOUND is the bank unit (b1-b9)
							local L_BANK_ITEMS $get_quest_data(L_PLAYER_ID,L_BANK_UNIT)
							local L_BANK_IDX $get_token(BANK_SEARCH_FOUND,1)
							
							local L_ITEM_DISASSEMBLED_TOKEN $func(func_bank_disassemble_ammo,L_PLAYER_ID,L_BANK_UNIT,L_BANK_IDX)
							add L_ITEM_QUANTITY $get_token(L_ITEM_DISASSEMBLED_TOKEN,1) //Slot 1 holds the ammo
							local L_ITEM_QUANTITY $int(L_ITEM_QUANTITY)
							local L_ITEM_SCRIPTNAME $func(func_bank_assemble_ammo,L_ITEM_SCRIPTNAME,-1,L_ITEM_QUANTITY)
							
							if ( L_BANK_ITEMS equals '0' )
							{
								local L_BANK_ITEMS ''
							}
							
							token.set L_BANK_ITEMS L_BANK_IDX L_ITEM_SCRIPTNAME
							quest set L_PLAYER_ID L_BANK_UNIT L_BANK_ITEMS
							local L_QUEST_SET 1
						}
						else
						{
							local L_ITEM_SCRIPTNAME $func(func_bank_assemble_ammo,L_ITEM_SCRIPTNAME,-1,L_ITEM_QUANTITY)
							
							if ( L_BANK_ITEMS equals '0' )
							{
								local L_BANK_ITEMS ''
							}
							
							token.add L_BANK_ITEMS L_ITEM_SCRIPTNAME
							quest set L_PLAYER_ID L_BANK_UNIT L_BANK_ITEMS
							local L_QUEST_SET 1
						}
							
					}
				}
			}
			else
			{
				dplayermessage L_PLAYER_ID "Your item doesn't exist!"
				local EXIT_SUB 1
			}
			if ( !EXIT_SUB )
			{
				local L_BANK_ITEMS $get_quest_data(L_PLAYER_ID,L_BANK_UNIT)
				if ( L_BANK_ITEMS equals '0' )
				{
					local L_BANK_ITEMS ''
				}
				if ( L_QUEST_SET != 1 )
				{
					callexternal L_ITEM_ID item_banked //Gotta call these so it looks nice on the client
					callclitemevent L_ITEM_ID game_putinpack
					deleteent L_ITEM_ID //Delete the ent
					
					token.add L_BANK_ITEMS L_ITEM_SCRIPTNAME
					quest set L_PLAYER_ID L_BANK_UNIT L_BANK_ITEMS
					local L_QUEST_SET 1
				}
				
				local L_CONFIRM_DEPOSIT "Your "
				stradd L_CONFIRM_DEPOSIT L_ITEM_FULLNAME
				stradd L_CONFIRM_DEPOSIT " has been added to your bank."
				infomsg L_PLAYER_ID "BANK_TITLE" "L_CONFIRM_DEPOSIT"
				
				if ( CURRENTLY_WITHDRAWING != 1 )
				{
					callevent bank_open
					callevent 0.3 bank_close
				}
			}
		}
		setvard CURRENTLY_DEPOSITING 0
	}
	else
	{
		dplayermessage L_PLAYER_ID "Depositing is in use; try again in a moment."
	}
}

{ bank_get_free //PARAM1 = PlayerID
	if ( BANK_CURRENT equals full ) //Checks to see if a free space hasn't already been found
	{
		local L_PLAYER_ID PARAM1
		local L_BANK_UNIT $get_token(BANK_STRINGS,game.script.iteration) //Gets the token according to what iteration the loop is on
		local L_BANK_ITEMS $get_quest_data(L_PLAYER_ID,L_BANK_UNIT) //Gets the quest data of the user of the iteration of the loop
		add BANK_WITHDRAW_CHECK $len(L_BANK_ITEMS)
		if ( $len(L_BANK_ITEMS) < BANK_MAX_STRING )
		{
			setvard BANK_CURRENT L_BANK_UNIT
		}
	}
}

{ bank_get_reject //PARAM1 = Item scriptname PARAM2 = Item full name
	local L_ITEM_SCRIPTNAME PARAM1
	local L_ITEM_FULLNAME PARAM2
	local L_REJECT_STRING $get_token(BANK_DEPOSIT_REJECTED,game.script.iteration)
	if ( BANK_REJECT_ITEM != 1 )
	{
		if ( L_ITEM_SCRIPTNAME equals L_REJECT_STRING )
		{
			if ( L_ITEM_SCRIPTNAME isnot fist_bare )
			{
				callevent bank_display_reject L_ITEM_FULLNAME
			}
			setvard BANK_REJECT_ITEM 1
		}
		if ( L_ITEM_SCRIPTNAME contains L_REJECT_STRING )
		{
			callevent bank_display_reject L_ITEM_FULLNAME
			setvard BANK_REJECT_ITEM 1
		}
	}
}

{ bank_display_reject //PARAM1 = Item name
	local L_ITEM_FULLNAME PARAM1
	if ( BANK_REJECT_ITEM != 1 )
	{
		local L_BANK_REJECT_STRING "Galat Chest: Cannot deposit expendable, perishable, ticket, or container item: ("
		stradd L_BANK_REJECT_STRING L_ITEM_FULLNAME
		stradd L_BANK_REJECT_STRING ")"
		dplayermessage NEW_CHEST_USER "L_BANK_REJECT_STRING"
	}
}

{ user_get_hands //PARAM1 = NEW_CHEST_USER
	setvard USER_LHAND_ID $get(PARAM1,scriptvar,'PLR_LEFT_HAND')
	setvard USER_RHAND_ID $get(PARAM1,scriptvar,'PLR_RIGHT_HAND')
	if ( $get(USER_LHAND_ID,itemname) isnot fist_bare )
	{
		add N_DEPOSIT_OPTIONS 1
	}
	if ( $get(USER_RHAND_ID,itemname) isnot fist_bare )
	{
		add N_DEPOSIT_OPTIONS 1
	}
}

{ bank_open
	playsound 0 10 Items/creak.wav
	playanim once ANIM_OPEN
}

{ bank_close
	playanim once ANIM_CLOSE
}